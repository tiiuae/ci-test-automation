#!groovy
// SPDX-FileCopyrightText: 2022-2023 Technology Innovation Institute (TII)
// SPDX-License-Identifier: Apache-2.0

import groovy.json.*

buildResults = [:]

bootJob  = ''
batJob   = ''
resultsDirectory = ''
configPath = ''
bootSuite = 'boot_test.robot'
batSuite = './'
deviceName = ''
usbHubSerial = ''
usbDrive = 'PSSD'

pipeline {
    agent { label "${params.label}" }
    stages {
      stage('Set variables') {
          steps {
              script {
                  resultsDirectory = "${params.device}_test_results"
                  def splitted = "${JOB_NAME}".split('/')
                  bootJob  = "${splitted[0]}/Testing/boot_test"
                  batJob   = "${splitted[0]}/Testing/smoke_tests"
                  configPath = "/home/${params.label}/Jenkins-agent/workspace/${splitted[0]}/Testing/test_config.json"

                  // Check for which agent and which target device
                  if ("${params.label}" == "tc-agent02"){
                      if (params.device == "orin-agx"){
                          deviceName = 'OrinAGX1'
                      } else if (params.device == "nuc"){
                          deviceName = 'NUC1'
                      } else if (params.device == "orin-nx"){
                          deviceName = 'OrinNX1'
                      }
                  } else if ("${params.label}" == "tc-agent03"){
                      if (params.device == "orin-agx"){
                          deviceName = 'OrinAGX2'
                      } else if (params.device == "nuc"){
                          deviceName = 'NUC2'
                      } else if (params.device == "orin-nx"){
                          deviceName = 'OrinNX2'
                      }
                  }
                  echo "DEVICE: ${deviceName}"

                  // Set pipeline description
                  currentBuild.description = "${params.server} ${params.device} BuildID: ${params.buildID}"

                  // Read test devices configfile and set usbHub serial to use right device
                  def deviceData = readJSON file: "${configPath}"
                  usbHubSerial = "${deviceData['addresses']["${deviceName}"]['usbhub_serial']}"
                  println("USB HUB serial: ${usbHubSerial}")

              }
           }
      }
      stage('Change USB HUB host to PC') {
          steps {
            script{
                sh "./BrainStem_dev_kit/bin/AcronameHubCLI -u 0 -s ${usbHubSerial}"

                // wait that USB drive is mounted
                sh 'sleep 10'
                def output = sh (
                    // Check for usb drive that is connected to target test device
                    script: "lsblk -o model,name |grep ${usbDrive}",
                    returnStdout: true
                    ).trim()
                def list = output.split(' ')

                // Take last element which is the target USB device
                USBDEVICE = list[-1]
                println("USB device: ${USBDEVICE}")
             }
          }
      }
      stage('Write OS image to USB disk') {
          steps {
              script{
                  println("${params.image}")
                  sh "sudo dd if=${params.image} of=/dev/${USBDEVICE} bs=1M status=progress conv=fsync"
              }
          }
      }
      stage('Change USB HUB host back to test device') {
          steps {
            script{
                sh "./BrainStem_dev_kit/bin/AcronameHubCLI -u 1 -s ${usbHubSerial}"
             }
          }
      }
      stage('Boot Test') {
          steps {
          	script{
              // Make directory for test results
              sh "mkdir -p ${params.resultsPath}/${params.buildID}/${resultsDirectory}/boot"
              build = build(
                  job: "${bootJob}", propagate: false,
                  parameters: [
                    [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${bootSuite}"],
                    [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "${params.server} buildID: ${params.buildID}"],
                    [$class: 'StringParameterValue', name: 'DEVICE_NAME', value: "${deviceName}"]
                  ]
              )

              // copy report and log
              sh "cp ~/Jenkins-agent/workspace/${bootJob}/Robot-Framework/test-suites/report.html ${params.resultsPath}/${params.buildID}/${resultsDirectory}/boot/report.html"
              sh "cp ~/Jenkins-agent/workspace/${bootJob}/Robot-Framework/test-suites/log.html ${params.resultsPath}/${params.buildID}/${resultsDirectory}/boot/log.html"
              if(build.result == "SUCCESS") {
                buildResults."boot" = "SUCCESS"
                echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
              } else {
                catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                              error("Boot build failed")
                }
              }
            }
          }
      }
      stage('BAT tests') {
          when {
            expression {
                buildResults.boot == 'SUCCESS'
            }
          }
          steps {
            script{
              // Make directory for test results
              sh "mkdir ${params.resultsPath}/${params.buildID}/${resultsDirectory}/bat"
              build = build(
                  job: "${batJob}", propagate: false,
                  parameters: [
                    [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${batSuite}"],
                    [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "${params.server} buildID: ${params.buildID}"],
                    [$class: 'StringParameterValue', name: 'DEVICE_NAME', value: "${deviceName}"],
                    [$class: 'StringParameterValue', name: 'INCLD_TAG', value: "${params.device}"]
                  ]
              )
              // copy report and log
              sh "cp ~/Jenkins-agent/workspace/${batJob}/Robot-Framework/test-suites/report.html ${params.resultsPath}/${params.buildID}/${resultsDirectory}/bat/report.html"
              sh "cp ~/Jenkins-agent/workspace/${batJob}/Robot-Framework/test-suites/log.html ${params.resultsPath}/${params.buildID}/${resultsDirectory}/bat/log.html"
              if(build.result == "SUCCESS") {
                buildResults."bat" = "SUCCESS"
                echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
              } else {
                catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                              error("BAT build failed")
                }
              }
             }
          }
      }
    }
}
