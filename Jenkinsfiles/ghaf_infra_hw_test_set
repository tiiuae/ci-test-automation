#!groovy
// SPDX-FileCopyrightText: 2022-2024 Technology Innovation Institute (TII)
// SPDX-License-Identifier: Apache-2.0

//import groovy.json.*

buildResults = [:]

bootJob  = 'testing/boot_test'
batJob  = 'testing/smoke_tests'
performanceJob  = 'testing/performance_tests'
configPath = "/etc/jenkins/test_config.json"
imageDir = "Image/"
imageName = ''
bootSuite = 'boot-test/'
performanceSuite = 'performance-tests/'
batSuite = 'bat-tests/'
deviceName = ''
usbHubSerial = ''
sdMuxUsbPort = ''
externalDrive = ''

pipeline {
    agent { label "${params.LABEL}" }
    stages {
        stage('download artifacts') {
            steps {
                script {
                    "mkdir -p Image"
                    def url = 'https://ghaf-jenkins-controller-villepekkajuntun.northeurope.cloudapp.azure.com/artifacts/jenkins-ghaf-pipeline-36/result-aarch64-jetson-orin-agx-debug/sd-image/nixos-sd-image-24.11.20240604.4130249-aarch64-linux.img.zst'
                    sh "wget -P Image ${url}"

                }
            }
        }
        stage('Set variables') {
            steps {
                script {
                    try {
                        // Fails with non-zero exit if dir1 does not exist
                        def output = sh(script: "ls ${imageDir} | grep img", returnStdout:true).trim()
                        imageName = "${output}"
                    } catch (Exception ex) {
                        println("Unable to read dir1: ${ex}")
                    }
                    echo "Target image: ${imageName}"

                    // Check for which agent and which target device
                    if ("${params.LABEL}" == "testagent"){
                        if (params.DEVICE == "orin-agx"){
                            deviceName = 'OrinAGX1'
                        } else if (params.DEVICE == "nuc"){
                            deviceName = 'NUC1'
                        } else if (params.DEVICE == "orin-nx"){
                            deviceName = 'OrinNX1'
                        } else if (params.DEVICE == "riscv"){testing/performance_tests
                            deviceName = 'Polarfire1'
                        } else if (params.DEVICE == "lenovo-x1"){
                            deviceName = 'LenovoX1-1'
                        }
                    } else if ("${params.LABEL}" == "tc-agent03"){
                        if (params.DEVICE == "orin-agx"){
                            deviceName = 'OrinAGX2'
                        } else if (params.DEVICE == "nuc"){
                            deviceName = 'NUC2'
                        } else if (params.DEVICE == "orin-nx"){
                            deviceName = 'OrinNX2'
                        } else if (params.DEVICE == "riscv"){
                            deviceName = 'Polarfire2'
                        } else if (params.DEVICE == "lenovo-x1"){
                            deviceName = 'LenovoX1-2'
                        }
                    }
                    echo "DEVICE: ${deviceName}"

                    // Set pipeline description
                    currentBuild.description = "Target image: ${imageName}"

                    // Read test devices configfile and set usbHub serial or sd-mux usb port to use right device
                    if ("${params.DEVICE}" == "riscv"){
                        externalDrive = 'sdmux'
                        def deviceData = readJSON file: "${configPath}"
                        sdMuxUsbPort = "${deviceData['addresses']["${deviceName}"]['usb_sd_mux_port']}"
                        println("SD-MUX USB port: ${sdMuxUsbPort}")

                    } else {
                        externalDrive = 'PSSD'
                        def deviceData = readJSON file: "${configPath}"
                        usbHubSerial = "${deviceData['addresses']["${deviceName}"]['usbhub_serial']}"
                        println("USB HUB serial: ${usbHubSerial}")
                    }

                    // if ("${params.DEVICE}" == "orin-agx" || "${params.DEVICE}" == "orin-nx") {
                    //     // Read zipped image file path from buildID.json to flash usb drive for Orin device
                    //     def buildData = readJSON file: "${params.resultsPath}/${params.buildID}/${params.buildID}.json"
                    //     zipImagePath = "${buildData['Image']}"
                    //     println("zipped path: ${zipImagePath}")
                    // }
                }
            }
        }
        stage('Change host to PC') {
            steps {
                script{
                    if ("${params.DEVICE}" == "riscv"){
                        sh "/run/wrappers/bin/sudo usbsdmux ${sdMuxUsbPort} host"
                    } else {
                        sh "/run/wrappers/bin/sudo AcronameHubCLI -u 0 -s ${usbHubSerial}"
                    }
                    // wait that USB drive is mounted
                    sh 'sleep 10'
                    def output = sh (
                        // Check for usb drive that is connected to target test device
                        script: "lsblk -o model,name |grep ${externalDrive}",
                        returnStdout: true
                    ).trim()
                    def list = output.split(' ')

                    // Take last element which is the target USB device
                    USBDEVICE = list[-1]
                    println("USB device: ${USBDEVICE}")

                 }
            }
        }
        stage('Write OS image') {
            steps {
                script{
                    println("${params.DEVICE}")
                    if ("${params.DEVICE}" == "orin-nx" || "${params.DEVICE}" == "orin-agx") {
                        // unzip zipped image, remove .zst ending from path and use that for flashing usb drive. Remove unzipped image after flashing.
                        sh "/run/wrappers/bin/sudo zstd -d ${imageDir}${imageName}"
                        unzippedPath = "${imageDir}${imageName}".minus(".zst")
                        sh "/run/wrappers/bin/sudo dd if=${unzippedPath} of=/dev/${USBDEVICE} bs=1M status=progress conv=fsync"
                        sh "/run/wrappers/bin/sudo rm -rf ${unzippedPath}"
                    } else if ("${params.DEVICE}" == "lenovo-x1"){
                        def buildData = readJSON file: "${params.resultsPath}/${params.buildID}/${params.buildID}.json"
                        imagePath = "${buildData['Output store paths'][0]}/disk1.raw"
                        println("${imagePath}")
                        sh "/run/wrappers/bin/sudo dd if=${imagePath} of=/dev/${USBDEVICE} bs=1M status=progress conv=fsync"
                    } else {
                        println("${params.image}")
                        sh "/run/wrappers/bin/sudo dd if=${params.image} of=/dev/${USBDEVICE} bs=1M status=progress conv=fsync"
                    }
                }
            }
        }
        stage('Change host back to test device') {
            steps {
                script{
                    if ("${params.DEVICE}" == "riscv"){
                        sh "/run/wrappers/bin/sudo usbsdmux ${sdMuxUsbPort} dut"
                    } else {
                        sh "/run/wrappers/bin/sudo AcronameHubCLI -u 1 -s ${usbHubSerial}"
                    }
                }
            }
        }
        stage('Boot Test') {
            steps {
              	script{
                    build = build(
                        job: "${bootJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${bootSuite}"],
                          [$class: 'StringParameterValue', name: 'DESCRIPTION', value: " buildID: "],
                          [$class: 'StringParameterValue', name: 'DEVICE_NAME', value: "${deviceName}"],
                          [$class: 'StringParameterValue', name: 'INCLD_TAG', value: "bootAND${params.DEVICE}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        buildResults."boot" = "SUCCESS"
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                            error("Boot build failed")
                        }
                    }
                }
            }
        }
        stage('BAT tests') {
            when {
                expression {
                    buildResults.boot == 'SUCCESS'
                }
            }
            steps {
                script{
                    build = build(
                        job: "${batJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${batSuite}"],
                          [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "buildID: "],
                          [$class: 'StringParameterValue', name: 'DEVICE_NAME', value: "${deviceName}"],
                          [$class: 'StringParameterValue', name: 'INCLD_TAG', value: "batAND${params.DEVICE}"],
                          [$class: 'StringParameterValue', name: 'TARGET', value: "${params.TARGET}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        buildResults."bat" = "SUCCESS"
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                        catchError(stageResult: 'FAILURE', buildResult: 'FAILURE'){
                            error("BAT build failed")
                        }
                    }
                }
            }
        }
        stage('Performance tests') {
            when {
                expression {
                    buildResults.boot == 'SUCCESS'
                }
            }
            steps {
                script{
                    build = build(
                        job: "${performanceJob}", propagate: false,
                        parameters: [
                          [$class: 'StringParameterValue', name: 'RF_SUITE', value: "${performanceSuite}"],
                          [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "buildID: "],
                          [$class: 'StringParameterValue', name: 'DEVICE_NAME', value: "${deviceName}"],
                          [$class: 'StringParameterValue', name: 'INCLD_TAG', value: "performanceAND${params.DEVICE}"],
                          [$class: 'StringParameterValue', name: 'TARGET', value: "${params.TARGET}"]
                        ]
                    )
                    if(build.result == "SUCCESS") {
                        buildResults."bat" = "SUCCESS"
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                    } else {
                        echo "BUILD NUMBER: ${build.number} SUCCESSFULLY BUILD"
                        catchError(stageResult: 'FAILURE'){
                            error("Error during performance tests")
                        }
                    }
                }
            }
        }
        // stage('Turn off device') {
        //     steps {
        //       	script {
        //       	    build = build(
        //                 job: "${turnoffJob}", propagate: false,
        //                 parameters: [
        //                   [$class: 'StringParameterValue', name: 'DESCRIPTION', value: "${params.server} buildID: ${params.buildID}"],
        //                   [$class: 'StringParameterValue', name: 'DEVICE_NAME', value: "${deviceName}"],
        //                   [$class: 'StringParameterValue', name: 'DEVICE_TYPE', value: "${params.DEVICE}"]
        //                 ]
        //             )
        //         }
        //     }
        // }
    }
    post {
        always {
            sh 'rm -rf Image/'
        }
    }
}
